pattern should be that traits define type Err
structs implementing triat with type Err use a error variant specific to structs
struct methods not inside trait impl should be different error variant which are specific to implementation 
remove unecessary contractclienterror variants
remove unecessary network network error variants
add unknown error variants to catchall

refactor job builder to job handler so it can unpack results to desired result types

refactor job runner to create task that has builder pattern to build up job and execute
    so it can be in its own task::spawn()

might not need async_stream -> try without
    - use recvstream tokio struct

figure out env logging and make p2p stuff debug to declutter output
refactor contract client so that it calls subxt client
create derive macro for mock stuff

- requester
    - payment
        - look into module.resources_required()
    - look for available workers, and send preferred worker in submit job request

- worker
    - refactor error handling and logging 

- catalog
    - make contract upgradeable 

- runtime
    - governance pallet so you can kill process 

larger refactor:
    - figure out drink so you can have a lighter runtime process and not need one chain
        - also means you wouldnt need to specify dev accounts per test
    - use zk snark as proof that worker completed work
    - use smalldot with worker 
    - figure out how to use substrate wasm builder for ink contract to not need to use cargo contract cli
        to build wasm binary

