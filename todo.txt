pattern should be that traits define type Err
structs implementing triat with type Err use a error variant specific to structs
struct methods not inside trait impl should be different error variant which are specific to implementation 

remove unecessary contractclienterror variants
remove unecessary network client/node error variants
add unknown error variants to catchall

create derive macro for mock stuff

- requester
    - payment
        - look into module.resources_required()
    - look for available workers, and send preferred worker in submit job request

- worker
    - refactor error handling and logging 
    - figure out wasmtime 

- catalog
    - make contract upgradeable 

- runtime
    - governance pallet so you can kill process 

larger refactor:
    - figure out drink so you can have a lighter runtime process and not need one chain
        - also means you wouldnt need to specify dev accounts per test
    - use zk snark as proof that worker completed work
    - use smalldot with worker 
    - figure out how to use substrate wasm builder for ink contract to not need to use cargo contract cli
        to build wasm binary



#[test]
fn foo() {
    let wat = r#"
        (module
            (func $add_one (param $lhs i32) (result i32)
                local.get $lhs
                i32.const 1
                i32.add)
            (export "add_one" (func $add_one))
        )
    "#;

    let code = wat2wasm(wat).unwrap();

    let engine = Engine::default();
    let module = Module::new(&engine, code).unwrap();
    let mut store: Store<()> = Store::new(&engine, ());
    let linker = Linker::new(&engine);

    let instance = linker.instantiate(&mut store, &module).unwrap();
    let foo = instance
        .get_typed_func::<i32, i32>(&mut store, "add_one")
        .unwrap();
    let bar = foo.call(&mut store, 10).unwrap();

    assert_eq!(bar, 11);
}
